
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser_lexer;

import nodi.*;
import nodi.expr.*;
import nodi.statements.ElifOp;
import nodi.statements.IfOp;
import nodi.statements.Stat;
import nodi.statements.WhileOp;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\037\005\000\002\002\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\002\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\002\000" +
    "\002\033\004\000\002\032\007\000\002\032\007\000\002" +
    "\032\007\000\002\032\007\000\002\024\005\000\002\024" +
    "\003\000\002\023\005\000\002\023\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\036\014\000\002\030" +
    "\006\000\002\030\002\000\002\027\007\000\002\027\002" +
    "\000\002\020\005\000\002\020\003\000\002\021\012\000" +
    "\002\026\006\000\002\026\002\000\002\025\007\000\002" +
    "\025\002\000\002\031\003\000\002\031\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\002\000\002\016\006" +
    "\000\002\016\004\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\015\006\000\002\015\005\000\002\014" +
    "\006\000\002\014\005\000\002\013\011\000\002\012\004" +
    "\000\002\012\002\000\002\011\006\000\002\010\004\000" +
    "\002\010\002\000\002\007\007\000\002\006\004\000\002" +
    "\006\007\000\002\006\002\000\002\005\005\000\002\005" +
    "\003\000\002\004\005\000\002\004\006\000\002\004\003" +
    "\000\002\004\004\000\002\003\005\000\002\003\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\004\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\010\004\004\024\010\031\ufffd\001\002\000" +
    "\004\067\200\001\002\000\004\002\265\001\002\000\010" +
    "\004\004\024\010\031\ufffd\001\002\000\010\004\004\024" +
    "\010\031\ufffd\001\002\000\004\067\236\001\002\000\004" +
    "\031\012\001\002\000\004\067\023\001\002\000\012\002" +
    "\ufff9\004\004\024\010\031\012\001\002\000\012\002\ufff9" +
    "\004\004\024\010\031\012\001\002\000\012\002\ufff9\004" +
    "\004\024\010\031\012\001\002\000\012\002\ufff9\004\004" +
    "\024\010\031\012\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffb\001\002\000\004\027\024\001\002\000\010\030" +
    "\uffdd\033\026\067\025\001\002\000\004\005\uffda\001\002" +
    "\000\004\067\235\001\002\000\004\030\045\001\002\000" +
    "\004\005\031\001\002\000\012\017\035\020\032\021\033" +
    "\022\036\001\002\000\012\005\uffe9\010\uffe9\011\uffe9\030" +
    "\uffe9\001\002\000\012\005\uffe8\010\uffe8\011\uffe8\030\uffe8" +
    "\001\002\000\006\011\037\030\uffdb\001\002\000\012\005" +
    "\uffea\010\uffea\011\uffea\030\uffea\001\002\000\012\005\uffe7" +
    "\010\uffe7\011\uffe7\030\uffe7\001\002\000\006\033\026\067" +
    "\025\001\002\000\004\030\uffde\001\002\000\004\005\042" +
    "\001\002\000\012\017\035\020\032\021\033\022\036\001" +
    "\002\000\006\011\037\030\uffdb\001\002\000\004\030\uffdc" +
    "\001\002\000\004\005\046\001\002\000\024\004\004\023" +
    "\064\032\uffd6\034\060\035\061\037\047\040\056\045\051" +
    "\067\057\001\002\000\010\010\uffc0\014\146\036\147\001" +
    "\002\000\004\006\230\001\002\000\024\012\066\013\076" +
    "\014\071\015\070\016\074\027\072\051\065\064\100\067" +
    "\077\001\002\000\004\010\223\001\002\000\004\010\222" +
    "\001\002\000\004\010\221\001\002\000\036\004\004\023" +
    "\064\026\uffd6\032\uffd6\034\060\035\061\037\047\040\056" +
    "\042\uffd6\043\uffd6\044\uffd6\045\051\047\uffd6\067\057\001" +
    "\002\000\024\012\066\013\076\014\071\015\070\016\074" +
    "\027\072\051\065\064\100\067\077\001\002\000\010\006" +
    "\ufff2\011\164\027\165\001\002\000\010\010\uffc0\014\146" +
    "\036\147\001\002\000\010\010\uffc0\014\146\036\147\001" +
    "\002\000\036\004\004\023\064\026\uffd6\032\uffd6\034\060" +
    "\035\061\037\047\040\056\042\uffd6\043\uffd6\044\uffd6\045" +
    "\051\047\uffd6\067\057\001\002\000\004\032\144\001\002" +
    "\000\024\012\066\013\076\014\071\015\070\016\074\027" +
    "\072\051\065\064\100\067\077\001\002\000\024\012\066" +
    "\013\076\014\071\015\070\016\074\027\072\051\065\064" +
    "\100\067\077\001\002\000\044\010\uffb6\011\uffb6\030\uffb6" +
    "\041\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\001\002\000\040\010\uffb8\011\141\030\uffb8\050" +
    "\105\051\102\052\112\053\110\054\106\055\113\056\114" +
    "\057\107\060\111\061\104\062\103\063\115\001\002\000" +
    "\044\010\uffb2\011\uffb2\030\uffb2\041\uffb2\046\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\001\002\000\044" +
    "\010\uffb4\011\uffb4\030\uffb4\041\uffb4\046\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000\024\012" +
    "\066\013\076\014\071\015\070\016\074\027\072\051\065" +
    "\064\100\067\077\001\002\000\004\010\136\001\002\000" +
    "\044\010\uffb1\011\uffb1\030\uffb1\041\uffb1\046\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\001\002\000\044" +
    "\010\uffb7\011\uffb7\030\uffb7\041\uffb7\046\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\044\010" +
    "\uffb5\011\uffb5\030\uffb5\041\uffb5\046\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\046\010\uffb3" +
    "\011\uffb3\027\132\030\uffb3\041\uffb3\046\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\001\002\000\024\012" +
    "\066\013\076\014\071\015\070\016\074\027\072\051\065" +
    "\064\100\067\077\001\002\000\044\010\uffa2\011\uffa2\030" +
    "\uffa2\041\uffa2\046\uffa2\050\105\051\102\052\112\053\110" +
    "\054\106\055\113\056\114\057\107\060\111\061\104\062" +
    "\uffa2\063\uffa2\001\002\000\024\012\066\013\076\014\071" +
    "\015\070\016\074\027\072\051\065\064\100\067\077\001" +
    "\002\000\024\012\066\013\076\014\071\015\070\016\074" +
    "\027\072\051\065\064\100\067\077\001\002\000\024\012" +
    "\066\013\076\014\071\015\070\016\074\027\072\051\065" +
    "\064\100\067\077\001\002\000\024\012\066\013\076\014" +
    "\071\015\070\016\074\027\072\051\065\064\100\067\077" +
    "\001\002\000\024\012\066\013\076\014\071\015\070\016" +
    "\074\027\072\051\065\064\100\067\077\001\002\000\024" +
    "\012\066\013\076\014\071\015\070\016\074\027\072\051" +
    "\065\064\100\067\077\001\002\000\024\012\066\013\076" +
    "\014\071\015\070\016\074\027\072\051\065\064\100\067" +
    "\077\001\002\000\024\012\066\013\076\014\071\015\070" +
    "\016\074\027\072\051\065\064\100\067\077\001\002\000" +
    "\024\012\066\013\076\014\071\015\070\016\074\027\072" +
    "\051\065\064\100\067\077\001\002\000\024\012\066\013" +
    "\076\014\071\015\070\016\074\027\072\051\065\064\100" +
    "\067\077\001\002\000\024\012\066\013\076\014\071\015" +
    "\070\016\074\027\072\051\065\064\100\067\077\001\002" +
    "\000\024\012\066\013\076\014\071\015\070\016\074\027" +
    "\072\051\065\064\100\067\077\001\002\000\044\010\uffab" +
    "\011\uffab\030\uffab\041\uffab\046\uffab\050\105\051\102\052" +
    "\112\053\110\054\106\055\113\056\114\057\107\060\111" +
    "\061\104\062\103\063\uffab\001\002\000\030\010\uffa8\011" +
    "\uffa8\030\uffa8\041\uffa8\046\uffa8\050\105\051\102\052\112" +
    "\053\110\062\uffa8\063\uffa8\001\002\000\030\010\uffa5\011" +
    "\uffa5\030\uffa5\041\uffa5\046\uffa5\050\105\051\102\052\112" +
    "\053\110\062\uffa5\063\uffa5\001\002\000\044\010\uffae\011" +
    "\uffae\030\uffae\041\uffae\046\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\001\002\000\030\010\uffaa\011\uffaa" +
    "\030\uffaa\041\uffaa\046\uffaa\050\105\051\102\052\112\053" +
    "\110\062\uffaa\063\uffaa\001\002\000\044\010\uffad\011\uffad" +
    "\030\uffad\041\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\001\002\000\030\010\uffa7\011\uffa7\030" +
    "\uffa7\041\uffa7\046\uffa7\050\105\051\102\052\112\053\110" +
    "\062\uffa7\063\uffa7\001\002\000\030\010\uffa6\011\uffa6\030" +
    "\uffa6\041\uffa6\046\uffa6\050\105\051\102\052\112\053\110" +
    "\062\uffa6\063\uffa6\001\002\000\044\010\uffb0\011\uffb0\030" +
    "\uffb0\041\uffb0\046\uffb0\050\uffb0\051\uffb0\052\112\053\110" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\001\002\000\030\010\uffa9\011\uffa9\030\uffa9" +
    "\041\uffa9\046\uffa9\050\105\051\102\052\112\053\110\062" +
    "\uffa9\063\uffa9\001\002\000\044\010\uffac\011\uffac\030\uffac" +
    "\041\uffac\046\uffac\050\105\051\102\052\112\053\110\054" +
    "\106\055\113\056\114\057\107\060\111\061\104\062\uffac" +
    "\063\uffac\001\002\000\044\010\uffaf\011\uffaf\030\uffaf\041" +
    "\uffaf\046\uffaf\050\uffaf\051\uffaf\052\112\053\110\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\001\002\000\026\012\066\013\076\014\071\015\070" +
    "\016\074\027\072\030\134\051\065\064\100\067\077\001" +
    "\002\000\004\030\135\001\002\000\044\010\uffcc\011\uffcc" +
    "\030\uffcc\041\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\001\002\000\044\010\uffcd\011\uffcd\030" +
    "\uffcd\041\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\001\002\000\036\004\uffd3\023\uffd3\026\uffd3" +
    "\032\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\047\uffd3\067\uffd3\001\002\000\034" +
    "\030\140\050\105\051\102\052\112\053\110\054\106\055" +
    "\113\056\114\057\107\060\111\061\104\062\103\063\115" +
    "\001\002\000\044\010\uffa4\011\uffa4\030\uffa4\041\uffa4\046" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\001" +
    "\002\000\024\012\066\013\076\014\071\015\070\016\074" +
    "\027\072\051\065\064\100\067\077\001\002\000\006\010" +
    "\uffb9\030\uffb9\001\002\000\044\010\uffa3\011\uffa3\030\uffa3" +
    "\041\uffa3\046\uffa3\050\105\051\102\052\112\053\110\054" +
    "\106\055\113\056\114\057\107\060\111\061\104\062\103" +
    "\063\115\001\002\000\012\002\uffdf\004\uffdf\024\uffdf\031" +
    "\uffdf\001\002\000\016\026\uffd7\032\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\047\uffd7\001\002\000\012\010\uffbe\014\uffbe\036" +
    "\uffbe\050\uffbe\001\002\000\004\027\156\001\002\000\012" +
    "\010\uffc0\014\146\036\147\050\153\001\002\000\004\010" +
    "\152\001\002\000\036\004\uffd1\023\uffd1\026\uffd1\032\uffd1" +
    "\034\uffd1\035\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\047\uffd1\067\uffd1\001\002\000\004\014\146" +
    "\001\002\000\004\010\uffc2\001\002\000\012\010\uffbf\014" +
    "\uffbf\036\uffbf\050\uffbf\001\002\000\024\012\066\013\076" +
    "\014\071\015\070\016\074\027\072\051\065\064\100\067" +
    "\077\001\002\000\034\030\160\050\105\051\102\052\112" +
    "\053\110\054\106\055\113\056\114\057\107\060\111\061" +
    "\104\062\103\063\115\001\002\000\010\010\uffc0\014\146" +
    "\036\147\001\002\000\004\010\uffc1\001\002\000\004\010" +
    "\163\001\002\000\036\004\uffd2\023\uffd2\026\uffd2\032\uffd2" +
    "\034\uffd2\035\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\047\uffd2\067\uffd2\001\002\000\004\067\200" +
    "\001\002\000\030\012\066\013\076\014\071\015\070\016" +
    "\074\027\072\030\171\051\065\064\100\066\170\067\077" +
    "\001\002\000\004\030\177\001\002\000\036\011\175\030" +
    "\uffbb\050\105\051\102\052\112\053\110\054\106\055\113" +
    "\056\114\057\107\060\111\061\104\062\103\063\115\001" +
    "\002\000\004\067\172\001\002\000\004\010\uffca\001\002" +
    "\000\006\011\173\030\uffba\001\002\000\026\012\066\013" +
    "\076\014\071\015\070\016\074\027\072\051\065\064\100" +
    "\066\170\067\077\001\002\000\004\030\uffbc\001\002\000" +
    "\026\012\066\013\076\014\071\015\070\016\074\027\072" +
    "\051\065\064\100\066\170\067\077\001\002\000\004\030" +
    "\uffbd\001\002\000\004\010\uffcb\001\002\000\010\005\ufff2" +
    "\006\ufff2\011\164\001\002\000\006\005\ufff3\006\ufff3\001" +
    "\002\000\034\041\203\050\105\051\102\052\112\053\110" +
    "\054\106\055\113\056\114\057\107\060\111\061\104\062" +
    "\103\063\115\001\002\000\030\004\004\023\064\034\060" +
    "\035\061\037\047\040\056\042\uffd6\043\uffd6\044\uffd6\045" +
    "\051\067\057\001\002\000\010\042\uffc7\043\uffc7\044\206" +
    "\001\002\000\006\042\214\043\uffc4\001\002\000\024\012" +
    "\066\013\076\014\071\015\070\016\074\027\072\051\065" +
    "\064\100\067\077\001\002\000\010\042\uffc7\043\uffc7\044" +
    "\206\001\002\000\006\042\uffc8\043\uffc8\001\002\000\034" +
    "\041\212\050\105\051\102\052\112\053\110\054\106\055" +
    "\113\056\114\057\107\060\111\061\104\062\103\063\115" +
    "\001\002\000\030\004\004\023\064\034\060\035\061\037" +
    "\047\040\056\042\uffd6\043\uffd6\044\uffd6\045\051\067\057" +
    "\001\002\000\010\042\uffc6\043\uffc6\044\uffc6\001\002\000" +
    "\024\004\004\023\064\034\060\035\061\037\047\040\056" +
    "\043\uffd6\045\051\067\057\001\002\000\004\043\216\001" +
    "\002\000\004\010\uffc9\001\002\000\004\043\uffc5\001\002" +
    "\000\016\026\uffd8\032\uffd8\042\uffd8\043\uffd8\044\uffd8\047" +
    "\uffd8\001\002\000\036\004\uffcf\023\uffcf\026\uffcf\032\uffcf" +
    "\034\uffcf\035\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\067\uffcf\001\002\000\036\004\uffd4" +
    "\023\uffd4\026\uffd4\032\uffd4\034\uffd4\035\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4\067\uffd4" +
    "\001\002\000\036\004\uffce\023\uffce\026\uffce\032\uffce\034" +
    "\uffce\035\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\047\uffce\067\uffce\001\002\000\034\046\225\050" +
    "\105\051\102\052\112\053\110\054\106\055\113\056\114" +
    "\057\107\060\111\061\104\062\103\063\115\001\002\000" +
    "\024\004\004\023\064\034\060\035\061\037\047\040\056" +
    "\045\051\047\uffd6\067\057\001\002\000\004\047\227\001" +
    "\002\000\004\010\uffc3\001\002\000\024\012\066\013\076" +
    "\014\071\015\070\016\074\027\072\051\065\064\100\067" +
    "\077\001\002\000\004\010\232\001\002\000\036\004\uffd5" +
    "\023\uffd5\026\uffd5\032\uffd5\034\uffd5\035\uffd5\037\uffd5\040" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\047\uffd5\067\uffd5" +
    "\001\002\000\004\010\234\001\002\000\036\004\uffd0\023" +
    "\uffd0\026\uffd0\032\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\067\uffd0\001" +
    "\002\000\004\005\uffd9\001\002\000\004\027\237\001\002" +
    "\000\006\030\uffe4\067\240\001\002\000\004\005\253\001" +
    "\002\000\004\030\242\001\002\000\004\025\243\001\002" +
    "\000\012\017\035\020\032\021\033\022\036\001\002\000" +
    "\006\005\uffe0\011\251\001\002\000\004\005\246\001\002" +
    "\000\024\004\004\023\064\026\uffd6\034\060\035\061\037" +
    "\047\040\056\045\051\067\057\001\002\000\004\026\250" +
    "\001\002\000\012\002\uffe6\004\uffe6\024\uffe6\031\uffe6\001" +
    "\002\000\012\017\035\020\032\021\033\022\036\001\002" +
    "\000\004\005\uffe1\001\002\000\012\017\035\020\032\021" +
    "\033\022\036\001\002\000\006\011\255\030\uffe2\001\002" +
    "\000\004\067\257\001\002\000\004\030\uffe5\001\002\000" +
    "\004\005\260\001\002\000\012\017\035\020\032\021\033" +
    "\022\036\001\002\000\006\011\255\030\uffe2\001\002\000" +
    "\004\030\uffe3\001\002\000\004\031\uffff\001\002\000\004" +
    "\031\ufffe\001\002\000\004\002\000\001\002\000\006\005" +
    "\270\006\271\001\002\000\044\002\ufff8\004\ufff8\023\ufff8" +
    "\024\ufff8\026\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\037" +
    "\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\047\ufff8" +
    "\067\ufff8\001\002\000\012\017\035\020\032\021\033\022" +
    "\036\001\002\000\014\012\276\013\273\014\272\015\275" +
    "\016\277\001\002\000\006\010\uffed\011\uffed\001\002\000" +
    "\006\010\uffee\011\uffee\001\002\000\004\010\303\001\002" +
    "\000\006\010\uffec\011\uffec\001\002\000\006\010\uffef\011" +
    "\uffef\001\002\000\006\010\uffeb\011\uffeb\001\002\000\006" +
    "\010\ufff0\011\301\001\002\000\014\012\276\013\273\014" +
    "\272\015\275\016\277\001\002\000\004\010\ufff1\001\002" +
    "\000\006\065\305\067\200\001\002\000\044\002\ufff6\004" +
    "\ufff6\023\ufff6\024\ufff6\026\ufff6\031\ufff6\032\ufff6\034\ufff6" +
    "\035\ufff6\037\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\047\ufff6\067\ufff6\001\002\000\044\002\ufff4\004\ufff4" +
    "\023\ufff4\024\ufff4\026\ufff4\031\ufff4\032\ufff4\034\ufff4\035" +
    "\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\047\ufff4\067\ufff4\001\002\000\004\010\307\001\002\000" +
    "\006\065\311\067\200\001\002\000\044\002\ufff7\004\ufff7" +
    "\023\ufff7\024\ufff7\026\ufff7\031\ufff7\032\ufff7\034\ufff7\035" +
    "\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\067\ufff7\001\002\000\044\002\ufff5\004\ufff5\023" +
    "\ufff5\024\ufff5\026\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\037\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047" +
    "\ufff5\067\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\033\006\035\010\036\005\037\004\001" +
    "\001\000\006\024\265\032\266\001\001\000\002\001\001" +
    "\000\010\033\006\035\263\036\005\001\001\000\010\033" +
    "\006\035\262\036\005\001\001\000\002\001\001\000\004" +
    "\021\012\001\001\000\002\001\001\000\012\021\015\033" +
    "\014\034\016\036\013\001\001\000\012\021\015\033\014" +
    "\034\021\036\013\001\001\000\012\021\015\033\014\034" +
    "\020\036\013\001\001\000\012\021\015\033\014\034\017" +
    "\036\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\026\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\042\001\001\000\004\025\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\051\013\053\014" +
    "\052\016\061\024\047\033\054\040\062\001\001\000\006" +
    "\005\147\006\232\001\001\000\002\001\001\000\006\002" +
    "\223\015\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\051\013\053\014\052\016" +
    "\061\024\047\033\054\040\217\001\001\000\006\002\201" +
    "\015\074\001\001\000\002\001\001\000\006\005\147\006" +
    "\161\001\001\000\006\005\147\006\150\001\001\000\020" +
    "\007\051\013\053\014\052\016\061\024\047\033\054\040" +
    "\144\001\001\000\002\001\001\000\010\002\066\003\072" +
    "\015\074\001\001\000\006\002\142\015\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\136\015\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\100\015\074\001\001\000" +
    "\002\001\001\000\006\002\130\015\074\001\001\000\006" +
    "\002\127\015\074\001\001\000\006\002\126\015\074\001" +
    "\001\000\006\002\125\015\074\001\001\000\006\002\124" +
    "\015\074\001\001\000\006\002\123\015\074\001\001\000" +
    "\006\002\122\015\074\001\001\000\006\002\121\015\074" +
    "\001\001\000\006\002\120\015\074\001\001\000\006\002" +
    "\117\015\074\001\001\000\006\002\116\015\074\001\001" +
    "\000\006\002\115\015\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\066\003\132\015\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\066\003\141\015\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\147\006\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\156\015\074\001\001\000\002\001\001\000\006\005" +
    "\147\006\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\200\001\001\000\010\002" +
    "\166\004\165\015\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\166\004\173\015\074\001\001\000\002" +
    "\001\001\000\010\002\166\004\175\015\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\051\013\053\014" +
    "\052\016\061\024\047\033\054\040\203\001\001\000\006" +
    "\011\206\012\204\001\001\000\004\010\214\001\001\000" +
    "\006\002\210\015\074\001\001\000\006\011\206\012\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\051\013\053\014\052\016\061\024\047\033\054\040\212" +
    "\001\001\000\002\001\001\000\020\007\051\013\053\014" +
    "\052\016\061\024\047\033\054\040\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\051\013\053\014\052\016" +
    "\061\024\047\033\054\040\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\066\003\230\015\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\243\020\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\051\013\053" +
    "\014\052\016\061\024\047\033\054\040\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\243\020\251" +
    "\001\001\000\002\001\001\000\004\017\253\001\001\000" +
    "\004\027\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\260\001\001\000\004\027" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\305\001\001\000\006\022\277\023\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\277\023\301\001\001\000" +
    "\002\001\001\000\006\024\265\032\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\265\032\307\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= IterNoProcedure Procedure Iter 
            {
              Program RESULT =null;
		int noProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int noProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Iter> noProc = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure proc = (Procedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    RESULT = new Program(noProc,proc,iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IterNoProcedure ::= VarDecl IterNoProcedure 
            {
              ArrayList<Iter> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Decls> decl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int noProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> noProcedure = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<Iter> ();
        RESULT.add(new Iter(decl));
        RESULT.addAll(noProcedure);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IterNoProcedure ::= Function IterNoProcedure 
            {
              ArrayList<Iter> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int noProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> noProcedure = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
            RESULT.add(new Iter(func));
            RESULT.addAll(noProcedure);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IterNoProcedure ::= 
            {
              ArrayList<Iter> RESULT =null;
		
    RESULT = new ArrayList<Iter>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= VarDecl Iter 
            {
              ArrayList<Iter> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Decls> decl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
    RESULT.add(new Iter(decl));
    RESULT.addAll(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter ::= Function Iter 
            {
              ArrayList<Iter> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
        RESULT.add(new Iter(func));
        RESULT.addAll(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter ::= Procedure Iter 
            {
              ArrayList<Iter> RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure proc = (Procedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
        RESULT.add(new Iter(proc));
        RESULT.addAll(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter ::= 
            {
              ArrayList<Iter> RESULT =null;
		
    RESULT = new ArrayList<Iter>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              ArrayList<Decls> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Decls> decls = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Decls>();
                        RESULT.addAll(decls);
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Decls> decls = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Decls>();
                                                     decls.add(new Decls(ids, type,"Type"));
                                                     RESULT.addAll(decls);
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Decls> decls = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Decls>();
                                                         decls.add(new Decls(ids, consts,"Assign"));
                                                         RESULT.addAll(decls);
                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<Decls>();
                                                RESULT.add(new Decls(ids, type,"Type"));

                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<Decls>();
                                                      RESULT.add(new Decls(ids, consts,"Assign"));
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>();
                                                                RESULT.add(new Identifier(id, "NORMAL"));
                                                                RESULT.addAll(ids);
                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>();
                                                RESULT.add(new Identifier(id,"NORMAL"));
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              ArrayList<ConstOp> RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstOp Const = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ConstOp>();
                                                RESULT.add(Const);
                                                RESULT.addAll(consts);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              ArrayList<ConstOp> RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp Const = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ConstOp>();
	                RESULT.add(Const);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp("real_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("integer_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ConstOp("string_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ConstOp("boolean","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ConstOp("boolean","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= REAL 
            {
              Type RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              Type RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              Type RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int funcParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int funcParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<FuncParams> funcParams = (ArrayList<FuncParams>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Type> types = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Function(new Identifier(id,"FUNCID"),funcParams,types,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              ArrayList<FuncParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncParams> otherFunc = (ArrayList<FuncParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<FuncParams>();
                                                                     RESULT.add(new FuncParams(new Identifier(id,"FUNCPARAM"),type));
                                                                     RESULT.addAll(otherFunc);
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= 
            {
              ArrayList<FuncParams> RESULT =null;
		RESULT = new ArrayList<FuncParams>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              ArrayList<FuncParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncParams> otherFunc = (ArrayList<FuncParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<FuncParams>();
    RESULT.add(new FuncParams(new Identifier(id,"FUNCPARAM"),type));
    RESULT.addAll(otherFunc);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OtherFuncParams ::= 
            {
              ArrayList<FuncParams> RESULT =null;
		RESULT = new ArrayList<FuncParams>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Type> types = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Type>();
                                        RESULT.add(type);
                                            RESULT.addAll(types);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Type>();
                            RESULT.add(type);
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              Procedure RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int procParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int procParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ProcParams> procParams = (ArrayList<ProcParams>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Procedure( new Identifier(id,"PROCID"),procParams,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcParams> procs = (ArrayList<ProcParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ArrayList<ProcParams>();
            RESULT.add(new ProcParams(id,type));
            RESULT.addAll(procs);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              ArrayList<ProcParams> RESULT =null;
		
    RESULT = new ArrayList<ProcParams> ();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcParams> procs = (ArrayList<ProcParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<ProcParams>();
        RESULT.add(new ProcParams(id,type));
        RESULT.addAll(procs);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              ArrayList<ProcParams> RESULT =null;
		
    RESULT = new ArrayList<ProcParams> ();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(id,"NORMAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(id,"OUT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              BodyOp RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Decls> vardecl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Decls> decls = new ArrayList<>();
    decls.addAll(vardecl);
    decls.addAll(body.getDecls());
    RESULT = new BodyOp(body.getStats(),decls);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        body.getStats().add(stat);
    RESULT = new BodyOp(body.getStats(),body.getDecls());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              BodyOp RESULT =null;
		
    RESULT = new BodyOp(new ArrayList<Stat>(), new ArrayList<Decls>());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("ASSIGN",ids,exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Stat RESULT =null;
		int procCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCallOp procCall = (ProcCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = procCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Stat RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("RETURN",exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              Stat RESULT =null;
		int Ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> Ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("WRITE",Ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Stat RESULT =null;
		int Ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> Ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("WRITERETURN",Ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              Stat RESULT =null;
		int Ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> Ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("READ",Ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifstatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifstatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOp ifstat = (IfOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ifstat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whilestatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whilestatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp whilestat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = whilestat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listExprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listExprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> listExprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallOp(new Identifier(id,"FUNCALLID"),listExprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCallOp(new Identifier(id,"FUNCALLID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int procExprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procExprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> procExprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcCallOp(new Identifier(id,"PROCALLID"), procExprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcCallOp(new Identifier(id,"PROCALLID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifs = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp Else = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (elifs!=null && Else!=null) {
            RESULT = new IfOp(expr,body,elifs,Else);}
            if (Else!=null && elifs==null){ // caso in cui ci sta else ma non ci stanno elifs
                RESULT = new IfOp(expr,body,Else);
            }
            if (Else == null && elifs != null){ // ci sono elifs ma non ci sono else
                RESULT = new IfOp(expr,body,elifs);
            }
            if(Else == null && elifs == null) { // non ci sono elifs e nemmeno else
                RESULT = new IfOp(expr,body);
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Elifs ::= Elif Elifs 
            {
              ArrayList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOp> elifs = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ElifOp>();
                                    RESULT.add(elif);
                                    RESULT.addAll(elifs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Elifs ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		RESULT = new ArrayList<ElifOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOp(expr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BodyOp("ElseOp",body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT = new BodyOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOp(expr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOArgs ::= IOArgsConcat IOArgs 
            {
              ArrayList<ExprOp> RESULT =null;
		int stringsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> strings = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> args = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ArrayList<ExprOp> ();
            RESULT.addAll(strings);
            RESULT.addAll(args);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              ArrayList<ExprOp> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> args = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ArrayList<ExprOp> ();
            RESULT.add(expr1);
            expr1.setDollar();
            if (expr1 instanceof Identifier) {
                expr1.setIsId();
            }
            RESULT.addAll(args);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= 
            {
              ArrayList<ExprOp> RESULT =null;
		 RESULT = new ArrayList<ExprOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOArgsConcat ::= IOArgsConcat PLUS IOArgsConcat 
            {
              ArrayList<ExprOp> RESULT =null;
		int concat1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int concat1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprOp> concat1 = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int concat2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int concat2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> concat2 = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprOp>();
RESULT.addAll(concat1);
RESULT.addAll(concat2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgsConcat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IOArgsConcat ::= STRING_CONST 
            {
              ArrayList<ExprOp> RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new ArrayList<ExprOp>(); RESULT.add (new ConstOp("string_const",lessema.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgsConcat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp>();
                                                    RESULT.add(expr1);
                                                    RESULT.addAll(exprs);
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp> ();
                                                RESULT.add(new Identifier(id,"REF"));
                                                RESULT.addAll(exprs);

                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp>();
                            RESULT.add(expr);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ProcExprs ::= REF ID 
            {
              ArrayList<ExprOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp> ();
                            RESULT.add(new Identifier(id,"REF"));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprOp>();
                                            RESULT.add(expr1);
                                            RESULT.addAll(exprs);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exprs ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprOp>();
	            RESULT.add(expr);
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= FunCall 
            {
              ExprOp RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= REAL_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("real_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= INTEGER_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("integer_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= STRING_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("string_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= ID 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identifier(lessema,"NORMAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= TRUE 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= FALSE 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr PLUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("plusOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr MINUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("minusOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr TIMES Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("timesOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr DIV Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("divOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr AND Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("andOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr OR Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("orOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("gtOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr GE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("geOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("ltOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("leOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr EQ Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("eqOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr NE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("neOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= LPAR Expr RPAR 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = expr1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= MINUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOp("unaryMinusOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= NOT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOp("notOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
