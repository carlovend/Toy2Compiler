
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser_lexer;

import nodi.*;
import nodi.expr.*;
import nodi.statements.*;

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\044\005\000\002\002\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\002\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\002\000" +
    "\002\040\004\000\002\037\007\000\002\037\007\000\002" +
    "\037\007\000\002\037\007\000\002\031\005\000\002\031" +
    "\003\000\002\030\005\000\002\030\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\043\014\000\002\035" +
    "\006\000\002\035\002\000\002\034\007\000\002\034\002" +
    "\000\002\025\005\000\002\025\003\000\002\026\012\000" +
    "\002\033\006\000\002\033\002\000\002\032\007\000\002" +
    "\032\002\000\002\036\003\000\002\036\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\002\000\002\023\006" +
    "\000\002\023\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\002\007\000\002\004" +
    "\015\000\002\003\013\000\002\003\002\000\002\005\006" +
    "\000\002\005\002\000\002\006\004\000\002\006\002\000" +
    "\002\022\006\000\002\022\005\000\002\021\006\000\002" +
    "\021\005\000\002\020\011\000\002\017\004\000\002\017" +
    "\002\000\002\016\006\000\002\015\004\000\002\015\002" +
    "\000\002\014\007\000\002\013\004\000\002\013\007\000" +
    "\002\013\002\000\002\012\005\000\002\012\003\000\002" +
    "\011\005\000\002\011\006\000\002\011\003\000\002\011" +
    "\004\000\002\010\005\000\002\010\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\010\004\004\033\010\040\ufffd\001\002\000" +
    "\004\076\240\001\002\000\004\002\326\001\002\000\010" +
    "\004\004\033\010\040\ufffd\001\002\000\010\004\004\033" +
    "\010\040\ufffd\001\002\000\004\076\277\001\002\000\004" +
    "\040\012\001\002\000\004\076\023\001\002\000\012\002" +
    "\ufff9\004\004\033\010\040\012\001\002\000\012\002\ufff9" +
    "\004\004\033\010\040\012\001\002\000\012\002\ufff9\004" +
    "\004\033\010\040\012\001\002\000\012\002\ufff9\004\004" +
    "\033\010\040\012\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffb\001\002\000\004\036\024\001\002\000\010\037" +
    "\uffdd\042\026\076\025\001\002\000\004\005\uffda\001\002" +
    "\000\004\076\276\001\002\000\004\037\045\001\002\000" +
    "\004\005\031\001\002\000\012\026\035\027\032\030\033" +
    "\031\036\001\002\000\012\005\uffe9\017\uffe9\020\uffe9\037" +
    "\uffe9\001\002\000\012\005\uffe8\017\uffe8\020\uffe8\037\uffe8" +
    "\001\002\000\006\020\037\037\uffdb\001\002\000\012\005" +
    "\uffea\017\uffea\020\uffea\037\uffea\001\002\000\012\005\uffe7" +
    "\017\uffe7\020\uffe7\037\uffe7\001\002\000\006\042\026\076" +
    "\025\001\002\000\004\037\uffde\001\002\000\004\005\042" +
    "\001\002\000\012\026\035\027\032\030\033\031\036\001" +
    "\002\000\006\020\037\037\uffdb\001\002\000\004\037\uffdc" +
    "\001\002\000\004\005\046\001\002\000\026\004\004\011" +
    "\066\032\065\041\uffd6\043\061\044\062\046\047\047\057" +
    "\054\051\076\060\001\002\000\010\017\uffb7\023\206\045" +
    "\210\001\002\000\004\006\271\001\002\000\024\021\077" +
    "\022\106\023\101\024\102\025\104\036\103\060\076\073" +
    "\110\076\107\001\002\000\004\017\264\001\002\000\004" +
    "\017\263\001\002\000\004\017\262\001\002\000\004\017" +
    "\261\001\002\000\040\004\004\011\066\032\065\035\uffd6" +
    "\041\uffd6\043\061\044\062\046\047\047\057\051\uffd6\052" +
    "\uffd6\053\uffd6\054\051\056\uffd6\076\060\001\002\000\024" +
    "\021\077\022\106\023\101\024\102\025\104\036\103\060" +
    "\076\073\110\076\107\001\002\000\010\006\ufff2\020\224" +
    "\036\225\001\002\000\010\017\uffb7\023\206\045\210\001" +
    "\002\000\010\017\uffb7\023\206\045\210\001\002\000\040" +
    "\004\004\011\066\032\065\035\uffd6\041\uffd6\043\061\044" +
    "\062\046\047\047\057\051\uffd6\052\uffd6\053\uffd6\054\051" +
    "\056\uffd6\076\060\001\002\000\004\041\204\001\002\000" +
    "\024\021\077\022\106\023\101\024\102\025\104\036\103" +
    "\060\076\073\110\076\107\001\002\000\004\036\067\001" +
    "\002\000\004\004\004\001\002\000\004\037\071\001\002" +
    "\000\004\007\072\001\002\000\004\010\074\001\002\000" +
    "\004\017\uffcc\001\002\000\004\036\075\001\002\000\024" +
    "\021\077\022\106\023\101\024\102\025\104\036\103\060" +
    "\076\073\110\076\107\001\002\000\024\021\077\022\106" +
    "\023\101\024\102\025\104\036\103\060\076\073\110\076" +
    "\107\001\002\000\044\017\uffad\020\uffad\037\uffad\050\uffad" +
    "\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\001\002\000\034\037\153\057\115\060\112\061\122\062" +
    "\120\063\116\064\123\065\124\066\117\067\121\070\114" +
    "\071\113\072\125\001\002\000\044\017\uffab\020\uffab\037" +
    "\uffab\050\uffab\055\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\001\002\000\044\017\uffa9\020\uffa9\037\uffa9" +
    "\050\uffa9\055\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9" +
    "\072\uffa9\001\002\000\024\021\077\022\106\023\101\024" +
    "\102\025\104\036\103\060\076\073\110\076\107\001\002" +
    "\000\044\017\uffa8\020\uffa8\037\uffa8\050\uffa8\055\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002\000" +
    "\044\017\uffae\020\uffae\037\uffae\050\uffae\055\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\001\002\000\044" +
    "\017\uffac\020\uffac\037\uffac\050\uffac\055\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\001\002\000\046\017" +
    "\uffaa\020\uffaa\036\142\037\uffaa\050\uffaa\055\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\001\002\000\024" +
    "\021\077\022\106\023\101\024\102\025\104\036\103\060" +
    "\076\073\110\076\107\001\002\000\044\017\uff99\020\uff99" +
    "\037\uff99\050\uff99\055\uff99\057\115\060\112\061\122\062" +
    "\120\063\116\064\123\065\124\066\117\067\121\070\114" +
    "\071\uff99\072\uff99\001\002\000\024\021\077\022\106\023" +
    "\101\024\102\025\104\036\103\060\076\073\110\076\107" +
    "\001\002\000\024\021\077\022\106\023\101\024\102\025" +
    "\104\036\103\060\076\073\110\076\107\001\002\000\024" +
    "\021\077\022\106\023\101\024\102\025\104\036\103\060" +
    "\076\073\110\076\107\001\002\000\024\021\077\022\106" +
    "\023\101\024\102\025\104\036\103\060\076\073\110\076" +
    "\107\001\002\000\024\021\077\022\106\023\101\024\102" +
    "\025\104\036\103\060\076\073\110\076\107\001\002\000" +
    "\024\021\077\022\106\023\101\024\102\025\104\036\103" +
    "\060\076\073\110\076\107\001\002\000\024\021\077\022" +
    "\106\023\101\024\102\025\104\036\103\060\076\073\110" +
    "\076\107\001\002\000\024\021\077\022\106\023\101\024" +
    "\102\025\104\036\103\060\076\073\110\076\107\001\002" +
    "\000\024\021\077\022\106\023\101\024\102\025\104\036" +
    "\103\060\076\073\110\076\107\001\002\000\024\021\077" +
    "\022\106\023\101\024\102\025\104\036\103\060\076\073" +
    "\110\076\107\001\002\000\024\021\077\022\106\023\101" +
    "\024\102\025\104\036\103\060\076\073\110\076\107\001" +
    "\002\000\024\021\077\022\106\023\101\024\102\025\104" +
    "\036\103\060\076\073\110\076\107\001\002\000\044\017" +
    "\uffa2\020\uffa2\037\uffa2\050\uffa2\055\uffa2\057\115\060\112" +
    "\061\122\062\120\063\116\064\123\065\124\066\117\067" +
    "\121\070\114\071\113\072\uffa2\001\002\000\030\017\uff9f" +
    "\020\uff9f\037\uff9f\050\uff9f\055\uff9f\057\115\060\112\061" +
    "\122\062\120\071\uff9f\072\uff9f\001\002\000\030\017\uff9c" +
    "\020\uff9c\037\uff9c\050\uff9c\055\uff9c\057\115\060\112\061" +
    "\122\062\120\071\uff9c\072\uff9c\001\002\000\044\017\uffa5" +
    "\020\uffa5\037\uffa5\050\uffa5\055\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\001\002\000\030\017\uffa1\020" +
    "\uffa1\037\uffa1\050\uffa1\055\uffa1\057\115\060\112\061\122" +
    "\062\120\071\uffa1\072\uffa1\001\002\000\044\017\uffa4\020" +
    "\uffa4\037\uffa4\050\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\001\002\000\030\017\uff9e\020\uff9e" +
    "\037\uff9e\050\uff9e\055\uff9e\057\115\060\112\061\122\062" +
    "\120\071\uff9e\072\uff9e\001\002\000\030\017\uff9d\020\uff9d" +
    "\037\uff9d\050\uff9d\055\uff9d\057\115\060\112\061\122\062" +
    "\120\071\uff9d\072\uff9d\001\002\000\044\017\uffa7\020\uffa7" +
    "\037\uffa7\050\uffa7\055\uffa7\057\uffa7\060\uffa7\061\122\062" +
    "\120\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7" +
    "\071\uffa7\072\uffa7\001\002\000\030\017\uffa0\020\uffa0\037" +
    "\uffa0\050\uffa0\055\uffa0\057\115\060\112\061\122\062\120" +
    "\071\uffa0\072\uffa0\001\002\000\044\017\uffa3\020\uffa3\037" +
    "\uffa3\050\uffa3\055\uffa3\057\115\060\112\061\122\062\120" +
    "\063\116\064\123\065\124\066\117\067\121\070\114\071" +
    "\uffa3\072\uffa3\001\002\000\044\017\uffa6\020\uffa6\037\uffa6" +
    "\050\uffa6\055\uffa6\057\uffa6\060\uffa6\061\122\062\120\063" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\001\002\000\026\021\077\022\106\023\101\024" +
    "\102\025\104\036\103\037\145\060\076\073\110\076\107" +
    "\001\002\000\040\017\uffaf\020\147\037\uffaf\057\115\060" +
    "\112\061\122\062\120\063\116\064\123\065\124\066\117" +
    "\067\121\070\114\071\113\072\125\001\002\000\004\037" +
    "\146\001\002\000\044\017\uffc3\020\uffc3\037\uffc3\050\uffc3" +
    "\055\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3" +
    "\001\002\000\044\017\uffc4\020\uffc4\037\uffc4\050\uffc4\055" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\001" +
    "\002\000\024\021\077\022\106\023\101\024\102\025\104" +
    "\036\103\060\076\073\110\076\107\001\002\000\006\017" +
    "\uffb0\037\uffb0\001\002\000\034\037\152\057\115\060\112" +
    "\061\122\062\120\063\116\064\123\065\124\066\117\067" +
    "\121\070\114\071\113\072\125\001\002\000\044\017\uff9b" +
    "\020\uff9b\037\uff9b\050\uff9b\055\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\001\002\000\004\013\154\001" +
    "\002\000\004\015\155\001\002\000\024\011\066\014\uffc5" +
    "\032\065\043\061\044\062\046\047\047\057\054\051\076" +
    "\060\001\002\000\004\014\161\001\002\000\024\011\066" +
    "\014\uffc5\032\065\043\061\044\062\046\047\047\057\054" +
    "\051\076\060\001\002\000\004\014\uffc6\001\002\000\010" +
    "\010\162\012\uffc9\017\uffc9\001\002\000\004\036\171\001" +
    "\002\000\006\012\165\017\uffc7\001\002\000\004\017\uffcb" +
    "\001\002\000\004\015\166\001\002\000\024\011\066\014" +
    "\uffc5\032\065\043\061\044\062\046\047\047\057\054\051" +
    "\076\060\001\002\000\004\014\170\001\002\000\004\017" +
    "\uffc8\001\002\000\024\021\077\022\106\023\101\024\102" +
    "\025\104\036\103\060\076\073\110\076\107\001\002\000" +
    "\034\037\173\057\115\060\112\061\122\062\120\063\116" +
    "\064\123\065\124\066\117\067\121\070\114\071\113\072" +
    "\125\001\002\000\004\013\174\001\002\000\004\015\175" +
    "\001\002\000\024\011\066\014\uffc5\032\065\043\061\044" +
    "\062\046\047\047\057\054\051\076\060\001\002\000\004" +
    "\014\177\001\002\000\010\010\162\012\uffc9\017\uffc9\001" +
    "\002\000\006\012\uffca\017\uffca\001\002\000\044\017\uff9a" +
    "\020\uff9a\037\uff9a\050\uff9a\055\uff9a\057\115\060\112\061" +
    "\122\062\120\063\116\064\123\065\124\066\117\067\121" +
    "\070\114\071\113\072\125\001\002\000\004\017\203\001" +
    "\002\000\042\004\uffd3\011\uffd3\014\uffd3\032\uffd3\035\uffd3" +
    "\041\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\056\uffd3\076\uffd3\001\002\000\012" +
    "\002\uffdf\004\uffdf\033\uffdf\040\uffdf\001\002\000\016\035" +
    "\uffd7\041\uffd7\051\uffd7\052\uffd7\053\uffd7\056\uffd7\001\002" +
    "\000\012\017\uffb5\023\uffb5\045\uffb5\057\uffb5\001\002\000" +
    "\012\017\uffb7\023\206\045\210\057\217\001\002\000\004" +
    "\036\213\001\002\000\004\017\212\001\002\000\042\004" +
    "\uffd1\011\uffd1\014\uffd1\032\uffd1\035\uffd1\041\uffd1\043\uffd1" +
    "\044\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\056\uffd1\076\uffd1\001\002\000\024\021\077\022\106" +
    "\023\101\024\102\025\104\036\103\060\076\073\110\076" +
    "\107\001\002\000\034\037\215\057\115\060\112\061\122" +
    "\062\120\063\116\064\123\065\124\066\117\067\121\070" +
    "\114\071\113\072\125\001\002\000\010\017\uffb7\023\206" +
    "\045\210\001\002\000\004\017\uffb8\001\002\000\004\023" +
    "\206\001\002\000\004\017\uffb9\001\002\000\012\017\uffb6" +
    "\023\uffb6\045\uffb6\057\uffb6\001\002\000\004\017\223\001" +
    "\002\000\042\004\uffd2\011\uffd2\014\uffd2\032\uffd2\035\uffd2" +
    "\041\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\056\uffd2\076\uffd2\001\002\000\004" +
    "\076\240\001\002\000\030\021\077\022\106\023\101\024" +
    "\102\025\104\036\103\037\231\060\076\073\110\075\230" +
    "\076\107\001\002\000\004\037\237\001\002\000\036\020" +
    "\235\037\uffb2\057\115\060\112\061\122\062\120\063\116" +
    "\064\123\065\124\066\117\067\121\070\114\071\113\072" +
    "\125\001\002\000\004\076\232\001\002\000\004\017\uffc1" +
    "\001\002\000\006\020\233\037\uffb1\001\002\000\026\021" +
    "\077\022\106\023\101\024\102\025\104\036\103\060\076" +
    "\073\110\075\230\076\107\001\002\000\004\037\uffb3\001" +
    "\002\000\026\021\077\022\106\023\101\024\102\025\104" +
    "\036\103\060\076\073\110\075\230\076\107\001\002\000" +
    "\004\037\uffb4\001\002\000\004\017\uffc2\001\002\000\010" +
    "\005\ufff2\006\ufff2\020\224\001\002\000\006\005\ufff3\006" +
    "\ufff3\001\002\000\034\050\243\057\115\060\112\061\122" +
    "\062\120\063\116\064\123\065\124\066\117\067\121\070" +
    "\114\071\113\072\125\001\002\000\032\004\004\011\066" +
    "\032\065\043\061\044\062\046\047\047\057\051\uffd6\052" +
    "\uffd6\053\uffd6\054\051\076\060\001\002\000\010\051\uffbe" +
    "\052\uffbe\053\246\001\002\000\006\051\254\052\uffbb\001" +
    "\002\000\024\021\077\022\106\023\101\024\102\025\104" +
    "\036\103\060\076\073\110\076\107\001\002\000\010\051" +
    "\uffbe\052\uffbe\053\246\001\002\000\006\051\uffbf\052\uffbf" +
    "\001\002\000\034\050\252\057\115\060\112\061\122\062" +
    "\120\063\116\064\123\065\124\066\117\067\121\070\114" +
    "\071\113\072\125\001\002\000\032\004\004\011\066\032" +
    "\065\043\061\044\062\046\047\047\057\051\uffd6\052\uffd6" +
    "\053\uffd6\054\051\076\060\001\002\000\010\051\uffbd\052" +
    "\uffbd\053\uffbd\001\002\000\026\004\004\011\066\032\065" +
    "\043\061\044\062\046\047\047\057\052\uffd6\054\051\076" +
    "\060\001\002\000\004\052\256\001\002\000\004\017\uffc0" +
    "\001\002\000\004\052\uffbc\001\002\000\016\035\uffd8\041" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\056\uffd8\001\002\000\042" +
    "\004\uffcf\011\uffcf\014\uffcf\032\uffcf\035\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\056\uffcf\076\uffcf\001\002\000\042\004\uffcd\011" +
    "\uffcd\014\uffcd\032\uffcd\035\uffcd\041\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056" +
    "\uffcd\076\uffcd\001\002\000\042\004\uffd4\011\uffd4\014\uffd4" +
    "\032\uffd4\035\uffd4\041\uffd4\043\uffd4\044\uffd4\046\uffd4\047" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\076\uffd4" +
    "\001\002\000\042\004\uffce\011\uffce\014\uffce\032\uffce\035" +
    "\uffce\041\uffce\043\uffce\044\uffce\046\uffce\047\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\056\uffce\076\uffce\001\002\000" +
    "\034\055\266\057\115\060\112\061\122\062\120\063\116" +
    "\064\123\065\124\066\117\067\121\070\114\071\113\072" +
    "\125\001\002\000\026\004\004\011\066\032\065\043\061" +
    "\044\062\046\047\047\057\054\051\056\uffd6\076\060\001" +
    "\002\000\004\056\270\001\002\000\004\017\uffba\001\002" +
    "\000\024\021\077\022\106\023\101\024\102\025\104\036" +
    "\103\060\076\073\110\076\107\001\002\000\004\017\273" +
    "\001\002\000\042\004\uffd5\011\uffd5\014\uffd5\032\uffd5\035" +
    "\uffd5\041\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\056\uffd5\076\uffd5\001\002\000" +
    "\004\017\275\001\002\000\042\004\uffd0\011\uffd0\014\uffd0" +
    "\032\uffd0\035\uffd0\041\uffd0\043\uffd0\044\uffd0\046\uffd0\047" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\076\uffd0" +
    "\001\002\000\004\005\uffd9\001\002\000\004\036\300\001" +
    "\002\000\006\037\uffe4\076\301\001\002\000\004\005\314" +
    "\001\002\000\004\037\303\001\002\000\004\034\304\001" +
    "\002\000\012\026\035\027\032\030\033\031\036\001\002" +
    "\000\006\005\uffe0\020\312\001\002\000\004\005\307\001" +
    "\002\000\026\004\004\011\066\032\065\035\uffd6\043\061" +
    "\044\062\046\047\047\057\054\051\076\060\001\002\000" +
    "\004\035\311\001\002\000\012\002\uffe6\004\uffe6\033\uffe6" +
    "\040\uffe6\001\002\000\012\026\035\027\032\030\033\031" +
    "\036\001\002\000\004\005\uffe1\001\002\000\012\026\035" +
    "\027\032\030\033\031\036\001\002\000\006\020\316\037" +
    "\uffe2\001\002\000\004\076\320\001\002\000\004\037\uffe5" +
    "\001\002\000\004\005\321\001\002\000\012\026\035\027" +
    "\032\030\033\031\036\001\002\000\006\020\316\037\uffe2" +
    "\001\002\000\004\037\uffe3\001\002\000\004\040\uffff\001" +
    "\002\000\004\040\ufffe\001\002\000\004\002\000\001\002" +
    "\000\006\005\331\006\332\001\002\000\050\002\ufff8\004" +
    "\ufff8\011\ufff8\032\ufff8\033\ufff8\035\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\043\ufff8\044\ufff8\046\ufff8\047\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\056\ufff8\076\ufff8\001\002\000\012" +
    "\026\035\027\032\030\033\031\036\001\002\000\014\021" +
    "\337\022\334\023\333\024\336\025\340\001\002\000\006" +
    "\017\uffed\020\uffed\001\002\000\006\017\uffee\020\uffee\001" +
    "\002\000\004\017\344\001\002\000\006\017\uffec\020\uffec" +
    "\001\002\000\006\017\uffef\020\uffef\001\002\000\006\017" +
    "\uffeb\020\uffeb\001\002\000\006\017\ufff0\020\342\001\002" +
    "\000\014\021\337\022\334\023\333\024\336\025\340\001" +
    "\002\000\004\017\ufff1\001\002\000\006\074\346\076\240" +
    "\001\002\000\050\002\ufff6\004\ufff6\011\ufff6\032\ufff6\033" +
    "\ufff6\035\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6" +
    "\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\056" +
    "\ufff6\076\ufff6\001\002\000\050\002\ufff4\004\ufff4\011\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4\043" +
    "\ufff4\044\ufff4\046\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\056\ufff4\076\ufff4\001\002\000\004\017\350\001" +
    "\002\000\006\074\352\076\240\001\002\000\050\002\ufff7" +
    "\004\ufff7\011\ufff7\032\ufff7\033\ufff7\035\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\043\ufff7\044\ufff7\046\ufff7\047\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\056\ufff7\076\ufff7\001\002\000" +
    "\050\002\ufff5\004\ufff5\011\ufff5\032\ufff5\033\ufff5\035\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\046\ufff5\047" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\056\ufff5\076\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\012\040\006\042\010\043\005\044\004\001" +
    "\001\000\006\031\326\037\327\001\001\000\002\001\001" +
    "\000\010\040\006\042\324\043\005\001\001\000\010\040" +
    "\006\042\323\043\005\001\001\000\002\001\001\000\004" +
    "\026\012\001\001\000\002\001\001\000\012\026\015\040" +
    "\014\041\016\043\013\001\001\000\012\026\015\040\014" +
    "\041\021\043\013\001\001\000\012\026\015\040\014\041" +
    "\020\043\013\001\001\000\012\026\015\040\014\041\017" +
    "\043\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\026\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\042\001\001\000\004\032\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\053\014\051\020" +
    "\054\021\052\023\062\031\047\040\055\045\063\001\001" +
    "\000\006\012\206\013\273\001\001\000\002\001\001\000" +
    "\006\007\264\022\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\053\014\051\020\054\021\052\023\062\031\047\040\055" +
    "\045\257\001\001\000\006\007\241\022\104\001\001\000" +
    "\002\001\001\000\006\012\206\013\221\001\001\000\006" +
    "\012\206\013\210\001\001\000\022\002\053\014\051\020" +
    "\054\021\052\023\062\031\047\040\055\045\204\001\001" +
    "\000\002\001\001\000\010\007\142\010\201\022\104\001" +
    "\001\000\002\001\001\000\004\040\067\001\001\000\002" +
    "\001\001\000\004\004\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\077\022\104" +
    "\001\001\000\006\007\200\022\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\150\022\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\110\022\104\001\001\000\002\001\001\000\006\007" +
    "\140\022\104\001\001\000\006\007\137\022\104\001\001" +
    "\000\006\007\136\022\104\001\001\000\006\007\135\022" +
    "\104\001\001\000\006\007\134\022\104\001\001\000\006" +
    "\007\133\022\104\001\001\000\006\007\132\022\104\001" +
    "\001\000\006\007\131\022\104\001\001\000\006\007\130" +
    "\022\104\001\001\000\006\007\127\022\104\001\001\000" +
    "\006\007\126\022\104\001\001\000\006\007\125\022\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\142\010\143\022\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\142\010\147\022\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\053\006\155\014\051\020\054\021" +
    "\052\023\156\031\047\001\001\000\002\001\001\000\020" +
    "\002\053\006\157\014\051\020\054\021\052\023\156\031" +
    "\047\001\001\000\002\001\001\000\004\003\162\001\001" +
    "\000\002\001\001\000\004\005\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\053\006\166\014\051" +
    "\020\054\021\052\023\156\031\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\171\022\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\053\006\175\014\051\020\054\021\052\023\156" +
    "\031\047\001\001\000\002\001\001\000\004\003\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\206\013\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\213\022\104\001\001\000\002\001\001\000\006\012\206" +
    "\013\215\001\001\000\002\001\001\000\004\012\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\240\001\001\000\010\007" +
    "\226\011\225\022\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\226\011\233\022\104\001\001\000\002" +
    "\001\001\000\010\007\226\011\235\022\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\053\014\051\020" +
    "\054\021\052\023\062\031\047\040\055\045\243\001\001" +
    "\000\006\016\246\017\244\001\001\000\004\015\254\001" +
    "\001\000\006\007\250\022\104\001\001\000\006\016\246" +
    "\017\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\053\014\051\020\054\021\052\023\062\031\047" +
    "\040\055\045\252\001\001\000\002\001\001\000\022\002" +
    "\053\014\051\020\054\021\052\023\062\031\047\040\055" +
    "\045\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\053\014\051\020\054\021\052\023\062" +
    "\031\047\040\055\045\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\142\010\271\022\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\304\025\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\053\014\051\020" +
    "\054\021\052\023\062\031\047\040\055\045\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\304\025" +
    "\312\001\001\000\002\001\001\000\004\024\314\001\001" +
    "\000\004\034\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\321\001\001\000\004" +
    "\034\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\346\001\001\000\006\027\340\030" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\340\030\342\001\001" +
    "\000\002\001\001\000\006\031\326\037\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\326\037\350\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= IterNoProcedure Procedure Iter 
            {
              Program RESULT =null;
		int noProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int noProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Iter> noProc = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure proc = (Procedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    RESULT = new Program(noProc,proc,iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IterNoProcedure ::= VarDecl IterNoProcedure 
            {
              ArrayList<Iter> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Decls> decl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int noProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> noProcedure = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<Iter> ();
        RESULT.add(new Iter(decl));
        RESULT.addAll(noProcedure);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IterNoProcedure ::= Function IterNoProcedure 
            {
              ArrayList<Iter> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int noProcedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noProcedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> noProcedure = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
            RESULT.add(new Iter(func));
            RESULT.addAll(noProcedure);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IterNoProcedure ::= 
            {
              ArrayList<Iter> RESULT =null;
		
    RESULT = new ArrayList<Iter>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= VarDecl Iter 
            {
              ArrayList<Iter> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Decls> decl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
    RESULT.add(new Iter(decl));
    RESULT.addAll(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter ::= Function Iter 
            {
              ArrayList<Iter> RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function func = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
        RESULT.add(new Iter(func));
        RESULT.addAll(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter ::= Procedure Iter 
            {
              ArrayList<Iter> RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure proc = (Procedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Iter> iter = (ArrayList<Iter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ArrayList<Iter> ();
        RESULT.add(new Iter(proc));
        RESULT.addAll(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter ::= 
            {
              ArrayList<Iter> RESULT =null;
		
    RESULT = new ArrayList<Iter>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              ArrayList<Decls> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Decls> decls = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Decls>();
                        RESULT.addAll(decls);
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Decls> decls = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Decls>();
                                                     decls.add(new Decls(ids, type,"Type"));
                                                     RESULT.addAll(decls);
                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Decls> decls = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Decls>();
                                                         decls.add(new Decls(ids, consts,"Assign"));
                                                         RESULT.addAll(decls);
                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<Decls>();
                                                RESULT.add(new Decls(ids, type,"Type"));

                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              ArrayList<Decls> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<Decls>();
                                                      RESULT.add(new Decls(ids, consts,"Assign"));
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>();
                                                                RESULT.add(new Identifier(id, "NORMAL"));
                                                                RESULT.addAll(ids);
                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>();
                                                RESULT.add(new Identifier(id,"NORMAL"));
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              ArrayList<ConstOp> RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstOp Const = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ConstOp>();
                                                RESULT.add(Const);
                                                RESULT.addAll(consts);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              ArrayList<ConstOp> RESULT =null;
		int Constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp Const = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ConstOp>();
	                RESULT.add(Const);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstOp("real_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("integer_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ConstOp("string_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ConstOp("boolean","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ConstOp("boolean","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= REAL 
            {
              Type RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              Type RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              Type RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int funcParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int funcParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<FuncParams> funcParams = (ArrayList<FuncParams>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Type> types = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Function(new Identifier(id,"FUNCID"),funcParams,types,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              ArrayList<FuncParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncParams> otherFunc = (ArrayList<FuncParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<FuncParams>();
                                                                     RESULT.add(new FuncParams(new Identifier(id,"FUNCPARAM"),type));
                                                                     RESULT.addAll(otherFunc);
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= 
            {
              ArrayList<FuncParams> RESULT =null;
		RESULT = new ArrayList<FuncParams>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              ArrayList<FuncParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherFuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherFuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncParams> otherFunc = (ArrayList<FuncParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<FuncParams>();
    RESULT.add(new FuncParams(new Identifier(id,"FUNCPARAM"),type));
    RESULT.addAll(otherFunc);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OtherFuncParams ::= 
            {
              ArrayList<FuncParams> RESULT =null;
		RESULT = new ArrayList<FuncParams>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Type> types = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Type>();
                                        RESULT.add(type);
                                            RESULT.addAll(types);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Type>();
                            RESULT.add(type);
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              Procedure RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int procParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int procParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ProcParams> procParams = (ArrayList<ProcParams>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Procedure( new Identifier(id,"PROCID"),procParams,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcParams> procs = (ArrayList<ProcParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ArrayList<ProcParams>();
            RESULT.add(new ProcParams(id,type));
            RESULT.addAll(procs);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              ArrayList<ProcParams> RESULT =null;
		
    RESULT = new ArrayList<ProcParams> ();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcParams> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcParams> procs = (ArrayList<ProcParams>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<ProcParams>();
        RESULT.add(new ProcParams(id,type));
        RESULT.addAll(procs);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              ArrayList<ProcParams> RESULT =null;
		
    RESULT = new ArrayList<ProcParams> ();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(id,"NORMAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier(id,"OUT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              BodyOp RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Decls> vardecl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Decls> decls = new ArrayList<>();
    decls.addAll(vardecl);
    decls.addAll(body.getDecls());
    RESULT = new BodyOp(body.getStats(),decls);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        body.getStats().add(stat);
    RESULT = new BodyOp(body.getStats(),body.getDecls());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              BodyOp RESULT =null;
		
    RESULT = new BodyOp(new ArrayList<Stat>(), new ArrayList<Decls>());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("ASSIGN",ids,exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Stat RESULT =null;
		int procCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCallOp procCall = (ProcCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = procCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Stat RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("RETURN",exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              Stat RESULT =null;
		int Ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> Ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("WRITE",Ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Stat RESULT =null;
		int Ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> Ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("WRITERETURN",Ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              Stat RESULT =null;
		int Ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> Ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat("READ",Ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifstatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifstatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOp ifstat = (IfOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ifstat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whilestatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whilestatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp whilestat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = whilestat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= Let SEMI 
            {
              Stat RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LetOp let = (LetOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = let;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Let ::= LET LPAR VarDecl RPAR GoWhen 
            {
              LetOp RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Decls> vardecl = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gowhenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gowhenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GoWhen gowhen = (GoWhen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LetOp(vardecl,gowhen);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Let",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GoWhen ::= GO WHEN LPAR Expr RPAR LOOP GS Stats GD OtherGo OtherwiseDo 
            {
              GoWhen RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int othergoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int othergoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<GoWhen> othergo = (ArrayList<GoWhen>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherwiseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherwiseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> otherwise = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = new GoWhen(expr, stats, othergo,otherwise);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GoWhen",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OtherGo ::= WHEN LPAR Expr RPAR LOOP GS Stats GD OtherGo 
            {
              ArrayList<GoWhen> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int othergoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int othergoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<GoWhen> othergo = (ArrayList<GoWhen>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<GoWhen>();
                                                                        RESULT.add(new GoWhen(expr,stats));
                                                                        RESULT.addAll(othergo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherGo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OtherGo ::= 
            {
              ArrayList<GoWhen> RESULT =null;
		RESULT = new ArrayList<GoWhen>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherGo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OtherwiseDo ::= OTHERWISEDO GS Stats GD 
            {
              ArrayList<Stat> RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ArrayList<Stat>();
                                                RESULT.addAll(stats);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherwiseDo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OtherwiseDo ::= 
            {
              ArrayList<Stat> RESULT =null;
		RESULT = new ArrayList<Stat>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherwiseDo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stats ::= Stat Stats 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> stats = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Stat>();
                                        RESULT.add(stat);
                                        RESULT.addAll(stats);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stats",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stats ::= 
            {
              ArrayList<Stat> RESULT =null;
		RESULT = new ArrayList<Stat>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stats",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listExprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listExprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> listExprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallOp(new Identifier(id,"FUNCALLID"),listExprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCallOp(new Identifier(id,"FUNCALLID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int procExprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procExprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> procExprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcCallOp(new Identifier(id,"PROCALLID"), procExprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcCallOp(new Identifier(id,"PROCALLID"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifs = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp Else = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (elifs!=null && Else!=null) {
            RESULT = new IfOp(expr,body,elifs,Else);}
            if (Else!=null && elifs==null){ // caso in cui ci sta else ma non ci stanno elifs
                RESULT = new IfOp(expr,body,Else);
            }
            if (Else == null && elifs != null){ // ci sono elifs ma non ci sono else
                RESULT = new IfOp(expr,body,elifs);
            }
            if(Else == null && elifs == null) { // non ci sono elifs e nemmeno else
                RESULT = new IfOp(expr,body);
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Elifs ::= Elif Elifs 
            {
              ArrayList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOp> elifs = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ElifOp>();
                                    RESULT.add(elif);
                                    RESULT.addAll(elifs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Elifs ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		RESULT = new ArrayList<ElifOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOp(expr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BodyOp("ElseOp",body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT = new BodyOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOp(expr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IOArgs ::= IOArgsConcat IOArgs 
            {
              ArrayList<ExprOp> RESULT =null;
		int stringsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> strings = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> args = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ArrayList<ExprOp> ();
            RESULT.addAll(strings);
            RESULT.addAll(args);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              ArrayList<ExprOp> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> args = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ArrayList<ExprOp> ();
            RESULT.add(expr1);
            expr1.setDollar();
            if (expr1 instanceof Identifier) {
                expr1.setIsId();
            }
            RESULT.addAll(args);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IOArgs ::= 
            {
              ArrayList<ExprOp> RESULT =null;
		 RESULT = new ArrayList<ExprOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IOArgsConcat ::= IOArgsConcat PLUS IOArgsConcat 
            {
              ArrayList<ExprOp> RESULT =null;
		int concat1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int concat1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprOp> concat1 = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int concat2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int concat2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> concat2 = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprOp>();
RESULT.addAll(concat1);
RESULT.addAll(concat2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgsConcat",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IOArgsConcat ::= STRING_CONST 
            {
              ArrayList<ExprOp> RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new ArrayList<ExprOp>(); RESULT.add (new ConstOp("string_const",lessema.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgsConcat",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp>();
                                                    RESULT.add(expr1);
                                                    RESULT.addAll(exprs);
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp> ();
                                                RESULT.add(new Identifier(id,"REF"));
                                                RESULT.addAll(exprs);

                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ProcExprs ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp>();
                            RESULT.add(expr);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ProcExprs ::= REF ID 
            {
              ArrayList<ExprOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprOp> ();
                            RESULT.add(new Identifier(id,"REF"));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprOp>();
                                            RESULT.add(expr1);
                                            RESULT.addAll(exprs);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exprs ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprOp>();
	            RESULT.add(expr);
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= FunCall 
            {
              ExprOp RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= REAL_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("real_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= INTEGER_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("integer_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= STRING_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("string_const",lessema.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ID 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identifier(lessema,"NORMAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= TRUE 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= FALSE 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessema = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr PLUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("plusOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr MINUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("minusOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr TIMES Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("timesOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr DIV Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("divOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr AND Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("andOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr OR Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("orOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr GT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("gtOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr GE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("geOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr LT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("ltOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr LE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("leOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr EQ Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("eqOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr NE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOP("neOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= LPAR Expr RPAR 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = expr1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= MINUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOp("unaryMinusOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= NOT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOp("notOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
